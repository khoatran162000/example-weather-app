import 'dart:convert';
import 'dart:ui';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

import 'package:http/http.dart' as http;
import 'package:intl/intl.dart';
import 'package:my_first_app/components/weather_item.dart';
// import 'package:modal_bottom_sheet/modal_bottom_sheet.dart';


import 'package:my_first_app/constants.dart'; //Import cho date format, có 1 cái DateFormat(format) {} đặt ở dưới cùng nữa để câu lệnh DateFormat('MMMMEEEEd') không bị lỗi

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  final TextEditingController _cityController = TextEditingController();
  final Constants _constants =
      Constants(); //đã được import package ở trên nếu không phải thì xóa vì trong vid họ không cho
  static String API_KEY = "e97ecd0c6c9842459bc130747230403";

  String location = 'Cape Town'; //Default location
  String weatherIcon = 'heavycloud.png';
  int temperature = 0;
  int windSpeed = 0;
  int humidity = 0;
  int cloud = 0;
  String currentDate = '';

  List hourlyWeatherForecast = [];
  List dailyWeatherForecast = [];

  String currentWeatherStatus = '';

  //Api Call
  String searchWeatherAPI = "https://api.weatherapi.com/v1/forecast.json?key=" +
      API_KEY +
      "&days=7&q=";

  void fetchWeatherData(String searchText) async {
    try {
      var searchResult =
          await http.get(Uri.parse(searchWeatherAPI + searchText)); // Cái này giúp mình tìm được data base dựa trên thành phố mình điền vào(searchText) cứ thử copy cái searchWeatherAPI ở trên rồi điền đại 1 thành phố ở sau dấu "=" là hiểu

      final weatherData = Map<String, dynamic>.from(
          json.decode(searchResult.body) ??
              'No data'); // Used to take the Database from the API key

      var locationData = weatherData[
          "location"]; // Use the formula above to take the Database that match the keyword

      var currentWeather = weatherData["current"];

      setState(() {
        location = getShortLocationName(locationData["name"]); //Ở trên ta lấy 1 biến là location và ở đây ta dùng "name" như 1 từ khóa để lấy data từ Database
        

        var parsedDate =
            DateTime.parse(locationData["localtime"].substring(0, 10));
        

        var newDate = DateFormat('MMMMEEEEd').format(parsedDate);
        currentDate = newDate;
        
        //updateWeather
        currentWeatherStatus = currentWeather["condition"]["text"]; // Ở đây ta chỉ cần lấy currentWeather vì nó = weatherDate["current"] vì "current" là
        // nên ta có thể truy cập vào các tập con của nó như "condition" cũng như tệp con của "condition" là "text" mà chỉ cần dùng mỗi currentWeather <Cái này phải đọc database của nó mói hiểu>

        weatherIcon = currentWeatherStatus.replaceAll(' ', '').toLowerCase() + ".png"; // Lệnh này giúp ta dùng chính tên của database để biến nó thành tên của ảnh mà ta lưu trong assets
        // Nhưng 1 đặc điểm là ta phải đặt tên ảnh của ta giống với tên trạng thái thời tiết trong database -> chưa tối ưu lắm
        temperature = currentWeather["temp_c"].toInt();
        windSpeed = currentWeather["wind_kph"].toInt();
        humidity = currentWeather["humidity"].toInt();
        cloud = currentWeather["cloud"].toInt();

        //Forecast data
        dailyWeatherForecast = weatherData["forecast"]["forecastday"];
        hourlyWeatherForecast = dailyWeatherForecast[0]["hour"];
        
      });
    } catch (e) {
      //debugPrint(e);
    }
  }

// Method này cho phép ta lấy tên viết tắt của địa điểm, và như ta thấy thì nó có 1 biến là String s mà ta sẽ thay bằng locationData["name"] ở trên để lấy dữ liệu API
  static String getShortLocationName(String s) {
    List<String> wordList = s.split(" ");

    if (wordList.isNotEmpty) {
      if (wordList.length > 1) {
        return wordList[0] + " " + wordList[1];
      } // Lệnh này sẽ trả về tên thành phố viết tắt với chỉ 2 chữ VD: London = LD
      else {
        return wordList[0];
      }
    } else {
      return " ";
    }
  }

  @override
  void initState() {
    fetchWeatherData(location);
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    SystemChrome.setEnabledSystemUIMode(SystemUiMode.manual,
        overlays: SystemUiOverlay.values);

    Size size = MediaQuery.of(context).size;

    return Scaffold(
      backgroundColor: Colors.white,
      body: Container(
        width: size.width,
        height: size.height,
        padding: const EdgeInsets.only(top: 70, left: 10, right: 10),
        color: _constants.primaryColor.withOpacity(.1),

        // Create the main big blue box
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            Container(
              padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 10),
              height: size.height * .7,
              decoration: BoxDecoration(
                gradient: _constants.linearGradientBlue,
                boxShadow: [
                  BoxShadow(
                    color: _constants.primaryColor.withOpacity(.5),
                    spreadRadius: 5,
                    blurRadius: 7,
                    offset: const Offset(0, 3),
                  ),
                ],
                borderRadius: BorderRadius.circular(20),
              ),
              
            ),
            

            // Create the Content inside the box
           
          ],
        ),
      ),
    );
  }
  
  void showMaterialModalBottomSheet({required BuildContext context, required SingleChildScrollView Function(dynamic context) builder}) {} // Dùng tạm cho import bottom_modal_sheet

  // DateFormat(format) {}
}



class ModalScrollController {
  static of(context) {}
} // Dùng tạm cho import bottom_modal_sheet
